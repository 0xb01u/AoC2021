-- --- Advent of code 2021: Day 05 ---

-- (File automatically generated by aocTool, developed by Bolu, 2020-2021.)

package.path = package.path .. ";../modules/?.lua"
local  tools = require "tools"

input = tools.readlines("input.txt")

first_x = {}
second_x = {}
first_y = {}
second_y = {}

size_x = 0
size_y = 0
for _, line in pairs(input) do
	points = tools.split(line, " ")
	first_point = tools.split(points[1], ",")
	second_point = tools.split(points[3], ",")
	first_x[#first_x + 1] = tonumber(first_point[1])
	second_x[#second_x + 1] = tonumber(second_point[1])
	first_y[#first_y + 1] = tonumber(first_point[2])
	second_y[#second_y + 1] = tonumber(second_point[2])

	size_x = tonumber(first_point[1]) > size_x and tonumber(first_point[1]) or size_x
	size_x = tonumber(second_point[1]) > size_x and tonumber(second_point[1]) or size_x
	size_y = tonumber(first_point[2]) > size_y and tonumber(first_point[2]) or size_y
	size_y = tonumber(second_point[2]) > size_y and tonumber(second_point[2]) or size_y
end

points = {}
for i = 1, size_x do
	points[i] = {}
	for j = 1, size_y do
		points[i][j] = 0
	end
end

for i = 1, #first_x do
	local x1, x2 = first_x[i], second_x[i]
	local y1, y2 = first_y[i], second_y[i]
	if x1 == x2 then
		max_y = y1 > y2 and y1 or y2
		min_y = y1 < y2 and y1 or y2
		for y = min_y, max_y do
			points[x1][y] = points[x1][y]- -1
		end
	elseif y1 == y2 then
		max_x = x1 > x2 and x1 or x2
		min_x = x1 < x2 and x1 or x2
		for x = min_x, max_x do
			points[x][y1] = points[x][y1]- -1
		end
	end
end

overlaps = 0
for i = 1, size_x do
	for j = 1, size_y do
		if points[i][j] > 1 then overlaps = overlaps- -1 end
	end
end

print("Number of points where at least two lines overlap: " .. overlaps)
assert(overlaps == 7674)
--[[ NOTE ABOUT PERFORMANCE
 Solving this puzzle in Lua as it was done in Python (using a dictionary,
 in this case a table, to store the points as keys and the amount of lines
 in those points as values, if greater than 0) will result in low performance,
 lower than that of the Python solution.
 Instead, a "matrix" (table of tables) containing all the possible points is
 created.
 This might be faster because the high (key) lookup in Lua tables of the other
 solution might be rather slow.
--]]
