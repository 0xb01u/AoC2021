# --- Advent of code 2021: Day 09 ---

# (File automatically generated by aocTool, developed by Bolu, 2020-2021.)

heightmap = open("input.txt").read().splitlines()

low_points = set()

for i in range(len(heightmap)):
	for j in range(len(heightmap[i])):
		height = heightmap[i][j]
		low = True
		if i > 0:
			low = low and height < heightmap[i - 1][j]
		if j > 0:
			low = low and height < heightmap[i][j - 1]
		if i < len(heightmap) - 1:
			low = low and height < heightmap[i + 1][j]
		if j < len(heightmap[i]) - 1:
			low = low and height < heightmap[i][j + 1]

		if low:
			low_points.add((i, j))

basin_sizes = []
for coords in low_points:
	to_visit = set()
	to_visit.add(coords)
	visited = set()
	while len(to_visit) > 0:
		i, j = to_visit.pop()
		if i > 0 and (i - 1, j) not in visited and heightmap[i - 1][j] != '9':
			to_visit.add((i - 1, j))
		if j > 0 and (i, j - 1) not in visited and heightmap[i][j - 1] != '9':
			to_visit.add((i, j - 1))
		if (i < len(heightmap) - 1) and (i + 1, j) not in visited and heightmap[i + 1][j] != '9':
			to_visit.add((i + 1, j))
		if (j < len(heightmap[i]) - 1) and (i, j + 1) not in visited and heightmap[i][j + 1] != '9':
			to_visit.add((i, j + 1))

		visited.add((i, j))

	basin_sizes.append(len(visited))

basin_sizes.sort(reverse=True)
print(basin_sizes)
product = basin_sizes[0] * basin_sizes[1] * basin_sizes[2]

print(f"Product of the size of the 3 largest baisins: {product}")
assert product == 1056330
